import paramiko
import pynetbox
import pandas as pd
import re
import os

file_path = '/home/tcs/router_details.xlsx'
data = pd.read_excel(file_path, engine='openpyxl')

router_ips = data['Router_Ips'].tolist()
router_names = data['Router_Names'].tolist()
usernames = data['Username'].tolist()
passwords = data['Password'].tolist()
NETBOX_URL = data['Netbox_url'].iloc[0]
NETBOX_TOKEN = data['Netbox_token'].iloc[0]

print("Router IPs:", router_ips)
print("Router Names:", router_names)

router_map = dict(zip(router_ips, router_names))
username = usernames[1]
password = passwords[1]
nb = pynetbox.api(NETBOX_URL, token=NETBOX_TOKEN)

ssh_client = paramiko.SSHClient()
ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())

for router_ip, router_name in router_map.items():
    ssh_client.connect(router_ip, username=username, password=password)
    stdin, stdout, stderr = ssh_client.exec_command("show mac address-table")
    output = stdout.read().decode()
    stdin.close()
    ssh_client.close()

    print(f"\n### {router_name} ###\n")
    print(output)

    # Regex to match MAC address pattern
    pattern = r"([0-9a-f]{4}\.[0-9a-f]{4}\.[0-9a-f]{4})"
    match = re.search(pattern, output)
    if match:
        mac = match.group(1)
        print(f"MAC Address: {mac}")

        # Run arp-scan to check if the IP and MAC address are both active
        arp_scan_output = os.popen('sudo arp-scan --localnet').read()
        device_status = "inactive"  # Default status

        # Normalize MAC format (remove dots and replace with colons for arp-scan format)
        formatted_mac = mac.replace('.', ':').lower()

        # Search for both IP and MAC in the arp-scan output
        if router_ip in arp_scan_output and formatted_mac in arp_scan_output:
            device_status = "active"
        else:
            device_status = "inactive"

        # Get device from NetBox and update the MAC address and status
        device = nb.dcim.devices.get(name=router_name)

        if device:
            device.update({
                "custom_fields": {
                    "MAC_Address": mac
                },
                "status": device_status
            })
            print(f"Device {router_name} IP: {router_ip}, MAC: {mac}, and status: {device_status} updated in NetBox")
        else:
            print(f"Device {router_name} not found in NetBox.")
    else:
        print(f"No MAC address found for {router_name}.")
