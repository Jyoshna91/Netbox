import paramiko
import pynetbox
import re

# NetBox and device configuration
NETBOX_URL = 'http://10.133.35.137:8000'
NETBOX_TOKEN = 'b10f953429d54bcbe45a24445161f863b202089b'
virtual_device_ip = '10.133.35.133'
device_name = 'VR1'
virtual_device_username = 'tcs'
virtual_device_password = 'tcs12345'

# Initialize NetBox API
nb = pynetbox.api(NETBOX_URL, token=NETBOX_TOKEN)

def get_enp0s3_ip_addresses():
    """Retrieve IPv4 and IPv6 addresses specifically for the enp0s3 interface from the virtual device."""
    ssh_client = paramiko.SSHClient()
    ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    
    try:
        ssh_client.connect(virtual_device_ip, username=virtual_device_username, password=virtual_device_password)
        
        # Run the command to get IP addresses
        stdin, stdout, stderr = ssh_client.exec_command("ip address")
        output = stdout.read().decode()

        # Focus on the enp0s3 section only
        enp0s3_section = re.search(r"2: enp0s3.*?(?=^\d+:|\Z)", output, re.DOTALL | re.MULTILINE)
        if not enp0s3_section:
            print("Could not find enp0s3 interface in the output.")
            return None, None

        enp0s3_output = enp0s3_section.group(0)

        # Extract IPv4 and IPv6 addresses from enp0s3 section
        ipv4_match = re.search(r"inet\s+(\d+\.\d+\.\d+\.\d+)", enp0s3_output)
        ipv6_match = re.search(r"inet6\s+([a-fA-F0-9:]+)", enp0s3_output)

        ipv4_address = ipv4_match.group(1) if ipv4_match else None
        ipv6_address = ipv6_match.group(1) if ipv6_match else None

        return ipv4_address, ipv6_address

    except Exception as e:
        print(f"An error occurred while connecting to the virtual device: {e}")
        return None, None
    finally:
        ssh_client.close()

def get_or_create_ip(ip_address, device, interface_name="enp0s3"):
    """Retrieve an IP address object from NetBox or create it if it doesnâ€™t exist, and assign it to the device."""
    ip_obj = nb.ipam.ip_addresses.get(address=ip_address)
    if not ip_obj:
        # Create the IP address if it doesn't exist
        ip_obj = nb.ipam.ip_addresses.create({
            "address": ip_address,
            "status": "active",
        })
    
    # Assign the IP to the device interface if not already assigned
    if not ip_obj.assigned_object:
        # Find or create an interface on the device
        interface = nb.dcim.interfaces.get(device_id=device.id, name=interface_name)
        if not interface:
            interface = nb.dcim.interfaces.create({
                "device": device.id,
                "name": interface_name,
                "type": "1000base-t"  # assuming a common type for demonstration
            })
        
        # Assign the IP to the interface
        ip_obj.update({"assigned_object_type": "dcim.interface", "assigned_object_id": interface.id})

    return ip_obj

def update_netbox_device_ips(ipv4_address, ipv6_address):
    """Update the device in NetBox with the primary IPv4 and IPv6 addresses."""
    device = nb.dcim.devices.get(name=device_name)
    if device:
        # Get or create IP objects and assign them to the device interfaces
        ipv4_obj = get_or_create_ip(ipv4_address, device) if ipv4_address else None
        ipv6_obj = get_or_create_ip(ipv6_address, device) if ipv6_address else None

        # Update the device in NetBox with IPs
        update_data = {}

        # Reference the IP objects by their IDs for primary_ip4 and primary_ip6
        if ipv4_obj:
            update_data["primary_ip4"] = ipv4_obj.id
        if ipv6_obj:
            update_data["primary_ip6"] = ipv6_obj.id

        if update_data:
            device.update(update_data)
            print(f"Device '{device_name}' updated in NetBox with:")
            print(f" - IPv4 Address: {ipv4_address}")
            print(f" - IPv6 Address: {ipv6_address}")
        else:
            print("No IP address data to update.")
    else:
        print(f"Device '{device_name}' not found in NetBox.")

# Main script execution
ipv4_address, ipv6_address = get_enp0s3_ip_addresses()
if ipv4_address or ipv6_address:
    # Update NetBox with device IP information
    update_netbox_device_ips(ipv4_address, ipv6_address)
else:
    print("Failed to retrieve necessary IP information from the enp0s3 interface.")
