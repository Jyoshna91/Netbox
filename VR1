import paramiko
import pynetbox
import re
import os

# NetBox and device configuration
NETBOX_URL = 'http://10.133.35.137:8000'
NETBOX_TOKEN = 'b10f953429d54bcbe45a24445161f863b202089b'
virtual_device_ip = '10.133.35.133'
device_name = 'VR1'
virtual_device_username = 'tcs'
virtual_device_password = 'tcs12345'

# Initialize NetBox API
nb = pynetbox.api(NETBOX_URL, token=NETBOX_TOKEN)

def get_enp0s3_mac_from_ip():
    """Retrieve the MAC address for the enp0s3 interface from the 'ip address' command on the virtual device (133)."""
    ssh_client = paramiko.SSHClient()
    ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    
    try:
        print("Connecting to virtual device (133)...")
        ssh_client.connect(virtual_device_ip, username=virtual_device_username, password=virtual_device_password)
        
        # Run the command to get IP addresses
        print("Running 'ip address' command on virtual device (133)...")
        stdin, stdout, stderr = ssh_client.exec_command("ip address")
        output = stdout.read().decode()
        print("Output from 'ip address':\n", output)

        # Focus on the enp0s3 section only and extract the MAC address
        enp0s3_section = re.search(r"2: enp0s3.*?(?=^\d+:|\Z)", output, re.DOTALL | re.MULTILINE)
        if not enp0s3_section:
            print("Could not find enp0s3 interface in the output.")
            return None

        enp0s3_output = enp0s3_section.group(0)
        print("enp0s3 section:\n", enp0s3_output)

        # Extract the MAC address from enp0s3 section
        mac_match = re.search(r"link/ether\s+([0-9a-fA-F:]{17})", enp0s3_output)
        mac_address = mac_match.group(1) if mac_match else None

        print("Extracted MAC Address from 'ip address':", mac_address)
        return mac_address

    except Exception as e:
        print(f"An error occurred while connecting to the virtual device: {e}")
        return None
    finally:
        ssh_client.close()

def get_mac_from_arp_scan(target_ip):
    """Run arp-scan on the local physical server (137) and retrieve the MAC address for the target IP (133)."""
    print("Running 'arp-scan --localnet' on physical server (137)...")
    arp_scan_output = os.popen("sudo arp-scan --localnet").read()
    print("Output from 'arp-scan':\n", arp_scan_output)
    
    # Search for the specific line containing the target IP and its MAC address
    arp_match = re.search(rf"{target_ip}\s+([0-9a-fA-F:]{17})", arp_scan_output)
    if arp_match:
        mac_from_arp_scan = arp_match.group(1)
        print("Extracted MAC Address from 'arp-scan':", mac_from_arp_scan)
        return mac_from_arp_scan
    else:
        print(f"MAC Address not found for IP {target_ip} in arp-scan output.")
        return None

def update_netbox_device(mac_address, status):
    """Update the device in NetBox with MAC address and status."""
    device = nb.dcim.devices.get(name=device_name)
    if device:
        print(f"Updating device '{device_name}' in NetBox...")
        update_data = {
            "status": status,
            "custom_fields": {
                "Mac address": mac_address  # Ensure this matches the exact name in NetBox
            }
        }

        device.update(update_data)
        print(f"Device '{device_name}' updated in NetBox with:")
        print(f" - MAC Address: {mac_address}")
        print(f" - Status: {status}")
    else:
        print(f"Device '{device_name}' not found in NetBox.")

# Main script execution
mac_address_from_ip = get_enp0s3_mac_from_ip()
mac_address_from_arp_scan = get_mac_from_arp_scan(virtual_device_ip)

if mac_address_from_ip and mac_address_from_arp_scan:
    # Compare MAC addresses to determine device status
    status = "active" if mac_address_from_ip == mac_address_from_arp_scan else "offline"
    
    # Update NetBox with the MAC and status information
    update_netbox_device(mac_address_from_ip, status)
else:
    print("Failed to retrieve MAC address information from either the virtual device or the arp-scan output.")
