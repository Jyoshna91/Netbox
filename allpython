import paramiko
import pynetbox
import pandas as pd
import re

# File Path for Router Details
file_path = '/home/tcs/router_details.xlsx'
data = pd.read_excel(file_path, engine='openpyxl')

# Retrieve details from Excel file
router_ips = data['Router_Ips'].tolist()
router_names = data['Router_Names'].tolist()
usernames = data['Username'].tolist()
passwords = data['Password'].tolist()
NETBOX_URL = data['Netbox_url'].iloc[0]
NETBOX_TOKEN = data['Netbox_token'].iloc[0]

# Map IPs and Router Names
router_map = dict(zip(router_ips, router_names))

# Connect to NetBox API
nb = pynetbox.api(NETBOX_URL, token=NETBOX_TOKEN)

# Function to Extract OS Version
def get_os_version(ssh_client):
    stdin, stdout, stderr = ssh_client.exec_command("show version")
    output = stdout.read().decode()
    stdin.close()

    print("\n### OS Version Output ###\n")
    print(output)

    # Extract OS version under Software -> NXOS
    os_pattern = r"NXOS:\s*version\s*([\d.]+\(\d+\))"
    os_match = re.search(os_pattern, output, re.IGNORECASE)
    if os_match:
        os_version = os_match.group(1)
        print(f"Extracted OS Version: {os_version}")
        return os_version
    else:
        print("OS version not found.")
        return None

# Establish SSH Connection
ssh_client = paramiko.SSHClient()
ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())

for router_ip, router_name in router_map.items():
    username = data.loc[data['Router_Ips'] == router_ip, 'Username'].values[0]
    password = data.loc[data['Router_Ips'] == router_ip, 'Password'].values[0]

    try:
        ssh_client.connect(router_ip, username=username, password=password)
        print(f"\nConnected to {router_name} ({router_ip})")
        
        # Get OS Version
        os_version = get_os_version(ssh_client)

        # Update OS Version in NetBox
        device = nb.dcim.devices.get(name=router_name)
        if device and os_version:
            device.update({
                "custom_fields": {
                    "OS_Version": os_version
                }
            })
            print(f"Updated {router_name} in NetBox with OS version: {os_version}.")
        else:
            print(f"Device {router_name} not found in NetBox or OS version not extracted.")

    except Exception as e:
        print(f"Error connecting to {router_name} ({router_ip}): {e}")

# Close SSH Connection
ssh_client.close()
