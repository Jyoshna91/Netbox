import paramiko
import pynetbox

# Network device connection details
router_ip = "10.133.35.148"
username = "admin"
password = "tcs123"

# NetBox API connection details
NETBOX_URL = "http://10.133.35.137:8000"
NETBOX_TOKEN = "your_netbox_api_token"  # Replace with your actual NetBox API token
nb = pynetbox.api(NETBOX_URL, token=NETBOX_TOKEN)

# Power feed details
power_feed_name = "Automatic Power Feed"  # Name for the new power feed
power_panel_id = 1  # ID of the power panel in NetBox
rack_id = 1  # ID of the rack in NetBox

# Initialize SSH client
ssh_client = paramiko.SSHClient()
ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())

try:
    # Connect to the network device using SSH
    ssh_client.connect(router_ip, username=username, password=password)

    # Execute the command to get power details
    stdin, stdout, stderr = ssh_client.exec_command("show environment power")
    output = stdout.read().decode()
    stdin.close()

    # Process the output to extract relevant power details
    power_details = {}
    lines = output.splitlines()
    for line in lines:
        if "Total Power Output (actual draw)" in line:
            value = line.split(":")[-1].strip()
            value = ''.join(filter(lambda x: x.isdigit() or x == '.', value))
            power_details['output'] = float(value)
        elif "Total Power Capacity" in line:
            value = line.split(":")[-1].strip()
            value = ''.join(filter(lambda x: x.isdigit() or x == '.', value))
            power_details['capacity'] = float(value)
        elif "Voltage" in line:
            value = line.split(":")[-1].strip()
            value = ''.join(filter(lambda x: x.isdigit() or x == '.', value))
            power_details['voltage'] = float(value)

    # Close the SSH connection
    ssh_client.close()

    # Calculate power utilization percentage
    actual_draw = power_details.get('output', 0)
    total_capacity = power_details.get('capacity', 0)
    voltage = power_details.get('voltage', 0)
    if total_capacity > 0:
        utilization_percentage = int((actual_draw / total_capacity) * 100)
    else:
        utilization_percentage = 0

    # Create a new power feed in NetBox
    new_power_feed = nb.dcim.power_feeds.create({
        "name": power_feed_name,
        "power_panel": power_panel_id,
        "rack": rack_id,
        "voltage": voltage,
        "amperage": actual_draw / voltage if voltage > 0 else 0,
        "max_utilization": utilization_percentage,
        "allocated_draw": actual_draw,
        "maximum_draw": total_capacity,
        "status": "active",
        "type": "primary",  # Example type, adjust as needed
        "phase": "single-phase",  # Example phase, adjust as needed
    })

    if new_power_feed:
        print(f"Successfully created power feed '{power_feed_name}' with utilization {utilization_percentage}%.")
    else:
        print("Failed to create the power feed.")

except Exception as e:
    print(f"An error occurred: {e}")
finally:
    ssh_client.close()
