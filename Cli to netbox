import paramiko
import pynetbox
import time
import json

# Replace these variables with your NetBox URL and API token
netbox_url = "http://10.133.35.137:8000"
netbox_token = "b10f953429d54bcbe45a24445161f863b202089b"

# Replace these variables with your switch's details
switch_ip = "10.133.35.148"
switch_username = "admin"
switch_password = "tcs123"

# Connect to NetBox
nb = pynetbox.api(netbox_url, token=netbox_token)

def ssh_command(ip, username, password, command):
    client = paramiko.SSHClient()
    client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    client.connect(ip, username=username, password=password)

    stdin, stdout, stderr = client.exec_command(command)
    time.sleep(2)
    output = stdout.read().decode()
    client.close()
    return output

# Define commands to run on the switch
commands = {
    "version": "show version",
    "inventory": "show inventory",
    "cpu": "show processes cpu",
    "memory": "show system resources",
    "config": "show running-config"
}

# Run commands and collect data
data = {}
for key, command in commands.items():
    data[key] = ssh_command(switch_ip, switch_username, switch_password, command)
    print(f"{key} data fetched successfully")

# Print fetched data for debugging
print("Fetched Data:")
print(json.dumps(data, indent=4))

# Function to parse version data (customize as per your command output)
def parse_version(output):
    version_info = {}
    for line in output.splitlines():
        if "NXOS:" in line:
            version_info["NXOS"] = line.split("NXOS:")[-1].strip()
        elif "uptime" in line:
            version_info["hostname"] = line.split()[0]
        elif "Model number" in line:
            version_info["model"] = line.split(":")[1].strip()
        elif "System serial number" in line:
            version_info["SN"] = line.split(":")[1].strip()
    return version_info

# Function to parse inventory data (customize as per your command output)
def parse_inventory(output):
    inventory_items = []
    current_item = {}
    for line in output.splitlines():
        if "NAME:" in line:
            if current_item:
                inventory_items.append(current_item)
            current_item = {"description": line.split('"')[1]}
        elif "PID:" in line:
            current_item["part_number"] = line.split()[1]
        elif "SN:" in line:
            current_item["serial_number"] = line.split()[1]
    if current_item:
        inventory_items.append(current_item)
    return inventory_items

# Parse the fetched data
parsed_data = {
    "version": parse_version(data["version"]),
    "inventory": parse_inventory(data["inventory"]),
    # Add more parsing functions as needed
}

# Print parsed data for debugging
print("Parsed Data:")
print(json.dumps(parsed_data, indent=4))

# Add or update device details in NetBox
device_name = parsed_data["version"]["hostname"]
device = nb.dcim.devices.get(name=device_name)

# Example of manufacturer and device type IDs (you should replace these with actual IDs from your NetBox)
manufacturer_id = 1  # Replace with the actual manufacturer ID in your NetBox
device_type_id = 1   # Replace with the actual device type ID in your NetBox

if not device:
    # If the device does not exist, create it
    device = nb.dcim.devices.create(
        name=device_name,
        device_role=1,  # Replace with the actual device role ID
        device_type=device_type_id,
        site=1,  # Replace with the actual site ID
        serial=parsed_data["version"].get("SN", "N/A"),
        custom_fields={"version": parsed_data["version"].get("NXOS", "N/A")}
    )
    print(f"Device {device_name} created in NetBox.")

if device:
    print(f"Device found in NetBox: {device.name}")

    # Ensure custom fields exist before updating
    custom_fields = nb.extras.custom_fields.filter(content_types="dcim.device")
    custom_field_names = [cf.name for cf in custom_fields]

    custom_field_updates = {}
    if "version" in custom_field_names:
        custom_field_updates["version"] = parsed_data["version"].get("NXOS", "N/A")

    # Update device details with parsed data
    update_data = {
        "serial": parsed_data["version"].get("SN", "N/A"),
        "device_type": device_type_id,
        "manufacturer": manufacturer_id,
        "custom_fields": custom_field_updates
    }
    device.update(update_data)
    
    # Add inventory items
    for item in parsed_data["inventory"]:
        inventory_item = {
            "device": device.id,
            "name": item["description"],
            "manufacturer": manufacturer_id,  # Replace with actual manufacturer ID
            "part_id": item["part_number"],
            "serial": item["serial_number"]
        }
        nb.dcim.inventory_items.create(inventory_item)
        print(f"Inventory item {item['description']} added to NetBox")

else:
    print(f"Device {device_name} not found in NetBox.")
