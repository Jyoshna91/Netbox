import requests
import json
import pynetbox
import urllib3

# Suppress InsecureRequestWarning
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

# Replace these variables with your switch's details and NetBox API details
switch_ip = "10.133.35.148"
switch_username = "admin"
switch_password = "tcs123"
netbox_url = "http://10.133.35.137:8000"
netbox_token = "b10f953429d54bcbe45a24445161f863b202089b"

# NX-API URL - ensure you're using the correct protocol (http or https)
nx_api_url = f"https://{switch_ip}/ins"

# Headers for the NX-API request
headers = {
    "content-type": "application/json-rpc"
}

# Payloads to fetch hardware details, CPU details, memory details, and running configuration
inventory_payload = [
    {
        "jsonrpc": "2.0",
        "method": "cli",
        "params": {
            "cmd": "show inventory",
            "version": 1
        },
        "id": 1
    }
]

cpu_payload = [
    {
        "jsonrpc": "2.0",
        "method": "cli",
        "params": {
            "cmd": "show processes cpu",
            "version": 1
        },
        "id": 2
    }
]

memory_payload = [
    {
        "jsonrpc": "2.0",
        "method": "cli",
        "params": {
            "cmd": "show system resources",
            "version": 1
        },
        "id": 3
    }
]

config_payload = [
    {
        "jsonrpc": "2.0",
        "method": "cli",
        "params": {
            "cmd": "show running-config",
            "version": 1
        },
        "id": 4
    }
]

def fetch_data(payload):
    response = requests.post(nx_api_url, data=json.dumps(payload), headers=headers, auth=(switch_username, switch_password), verify=False)
    if response.status_code == 200:
        return response.json()
    else:
        print(f"Failed to fetch details: {response.status_code}")
        return None

try:
    # Fetch and print inventory details
    inventory_data = fetch_data(inventory_payload)
    if inventory_data:
        print("Inventory Data:")
        print(json.dumps(inventory_data, indent=4))
        inventory = inventory_data['result']['body']['TABLE_inv']['ROW_inv']
        print("Inventory Details:")
        print(json.dumps(inventory, indent=4))
    
    # Fetch and print CPU details
    cpu_data = fetch_data(cpu_payload)
    if cpu_data:
        print("CPU Data:")
        print(json.dumps(cpu_data, indent=4))
        cpu_details = cpu_data['result']['body']
        print("CPU Details:")
        print(json.dumps(cpu_details, indent=4))
    
    # Fetch and print memory details
    memory_data = fetch_data(memory_payload)
    if memory_data:
        print("Memory Data:")
        print(json.dumps(memory_data, indent=4))
        memory_details = memory_data['result']['body']
        print("Memory Details:")
        print(json.dumps(memory_details, indent=4))
    
    # Fetch and print running configuration details
    config_data = fetch_data(config_payload)
    if config_data:
        print("Configuration Data:")
        print(json.dumps(config_data, indent=4))
        config_details = config_data['result']['body']
        print("Running Configuration:")
        print(config_details)

    # Connect to NetBox
    nb = pynetbox.api(netbox_url, token=netbox_token)

    # Fetch the device details from NetBox
    device_name = "Device"
    device = nb.dcim.devices.get(name=device_name)

    if device:
        print(f"Device found in NetBox: {device.name}")
        
        # Fetch and print rack details
        if device.rack:
            rack_id = device.rack.id
            rack = nb.dcim.racks.get(rack_id)
            if rack:
                print("Rack Details:")
                print(f"Name: {rack.name}")
                print(f"Facility ID: {rack.facility_id}")
                print(f"Site: {rack.site.name}")
                print(f"Tenant: {rack.tenant.name if rack.tenant else 'N/A'}")
                print(f"Type: {rack.type.display if rack.type else 'N/A'}")
                print(f"Width: {rack.width}")
                print(f"Status: {rack.status.label if rack.status else 'N/A'}")

        # Print inventory details from device
        for item in inventory:
            part_number = item.get('productid', 'N/A')
            serial_number = item.get('serialnum', 'N/A')
            description = item.get('desc', 'N/A')

            print(f"Part Number: {part_number}, Serial Number: {serial_number}, Description: {description}")

            # You can update custom fields or other attributes in NetBox as needed
            # Example: Update a custom field
            # custom_fields = device.custom_fields
            # custom_fields['part_number'] = part_number
            # device.update({'custom_fields': custom_fields})

        # Fetch and print cable details
        print("Cable Details:")
        interfaces = nb.dcim.interfaces.filter(device=device.id)
        for interface in interfaces:
            if interface.cable:
                cable = interface.cable
                print(f"Cable ID: {cable.id}")
                print(f"Type: {cable.type}")
                print(f"Status: {cable.status.label if cable.status else 'N/A'}")
                print(f"Length: {cable.length} {cable.length_unit}")
                print(f"Color: {cable.color}")
                print(f"Label: {cable.label}")
                print(f"Termination A: {cable.termination_a.device.name} - {cable.termination_a.name}")
                print(f"Termination B: {cable.termination_b.device.name} - {cable.termination_b.name}")
                print("-" * 30)

        # Fetch and print console connections
        print("Console Connections:")
        console_ports = nb.dcim.console_ports.filter(device=device.id)
        for port in console_ports:
            if port.connected_endpoint:
                print(f"Console Port: {port.device.name} - {port.name}")
                print(f"Connected to: {port.connected_endpoint.device.name} - {port.connected_endpoint.name}")
                print("-" * 30)

        # Fetch and print power connections
        print("Power Connections:")
        power_ports = nb.dcim.power_ports.filter(device=device.id)
        for port in power_ports:
            if port.connected_endpoint:
                print(f"Power Port: {port.device.name} - {port.name}")
                print(f"Connected to: {port.connected_endpoint.device.name} - {port.connected_endpoint.name}")
                print("-" * 30)

except requests.exceptions.RequestException as e:
    print(f"Error connecting to the switch: {e}")
